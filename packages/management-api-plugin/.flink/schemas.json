{
  "GetManagementReq": {
    "type": "object",
    "additionalProperties": false
  },
  "Module": {
    "type": "object",
    "properties": {
      "isPreloading": {
        "description": "`true` if the module is running during the Node.js preload",
        "type": "boolean"
      },
      "exports": {},
      "require": {
        "$ref": "#/definitions/NodeJS.Require"
      },
      "id": {
        "type": "string"
      },
      "filename": {
        "type": "string"
      },
      "loaded": {
        "type": "boolean"
      },
      "parent": {
        "$ref": "#/definitions/NodeJS.Module"
      },
      "children": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/NodeJS.Module"
        }
      },
      "path": {
        "type": "string"
      },
      "paths": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "additionalProperties": false,
    "required": [
      "children",
      "exports",
      "filename",
      "id",
      "isPreloading",
      "loaded",
      "parent",
      "path",
      "paths",
      "require"
    ]
  },
  "ManagementApiEndpoint": {
    "type": "object",
    "properties": {
      "config": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "object",
            "properties": {
              "reqSchema": {
                "$ref": "#/definitions/Definition"
              },
              "resSchema": {
                "$ref": "#/definitions/Definition"
              }
            },
            "additionalProperties": false
          },
          "routeProps": {
            "description": "Route props to control routing.\n\nEach handler needs to declare RouteProps which\ninstructs express web server how to route traffic.",
            "type": "object",
            "properties": {
              "method": {
                "description": "HTTP method which this handlers responds to.\n\nWill if not set attempt to extract HTTP method based\non handler file name prefix, for example `GetFoo.ts` will assume\nHTTP method `GET`.",
                "enum": [
                  "delete",
                  "get",
                  "post",
                  "put"
                ],
                "type": "string"
              },
              "path": {
                "description": "Route path including any path params.\nExample: `/user/:id`",
                "type": "string"
              },
              "mockApi": {
                "description": "Generates mock response based on handlers response schema.\n\nWill be ignored if handler does not have any response schema defined.\n\nThis should only be used during development ðŸ’¥",
                "type": "boolean"
              },
              "permissions": {
                "description": "Set permissions needed to access route if route requires authentication.",
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "docs": {
                "description": "Optional documentation of endpoint. Can be used for example in API docs.\nSupports markdown strings.",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": [
              "path"
            ]
          },
          "origin": {
            "description": "I.e. filename or plugin name that describes where handler origins from",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "routeProps"
        ]
      },
      "handlerFn": {
        "description": "Http handler function that handlers implements in order to\nhandle HTTP requests and return a JSON response.",
        "type": "object",
        "additionalProperties": false
      }
    },
    "additionalProperties": false,
    "required": [
      "config",
      "handlerFn"
    ]
  },
  "ManagementApiType": {
    "enum": [
      "MANAGEMENT_USER",
      "USER"
    ],
    "type": "string"
  },
  "ManagementApiModule": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string"
      },
      "type": {
        "enum": [
          "MANAGEMENT_USER",
          "USER"
        ],
        "type": "string"
      },
      "endpoints": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "config": {
              "type": "object",
              "properties": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reqSchema": {
                      "$ref": "#/definitions/Definition"
                    },
                    "resSchema": {
                      "$ref": "#/definitions/Definition"
                    }
                  },
                  "additionalProperties": false
                },
                "routeProps": {
                  "description": "Route props to control routing.\n\nEach handler needs to declare RouteProps which\ninstructs express web server how to route traffic.",
                  "type": "object",
                  "properties": {
                    "method": {
                      "description": "HTTP method which this handlers responds to.\n\nWill if not set attempt to extract HTTP method based\non handler file name prefix, for example `GetFoo.ts` will assume\nHTTP method `GET`.",
                      "enum": [
                        "delete",
                        "get",
                        "post",
                        "put"
                      ],
                      "type": "string"
                    },
                    "path": {
                      "description": "Route path including any path params.\nExample: `/user/:id`",
                      "type": "string"
                    },
                    "mockApi": {
                      "description": "Generates mock response based on handlers response schema.\n\nWill be ignored if handler does not have any response schema defined.\n\nThis should only be used during development ðŸ’¥",
                      "type": "boolean"
                    },
                    "permissions": {
                      "description": "Set permissions needed to access route if route requires authentication.",
                      "anyOf": [
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "docs": {
                      "description": "Optional documentation of endpoint. Can be used for example in API docs.\nSupports markdown strings.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "path"
                  ]
                },
                "origin": {
                  "description": "I.e. filename or plugin name that describes where handler origins from",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "required": [
                "routeProps"
              ]
            },
            "handlerFn": {
              "description": "Http handler function that handlers implements in order to\nhandle HTTP requests and return a JSON response.",
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false,
          "required": [
            "config",
            "handlerFn"
          ]
        }
      },
      "ui": {
        "type": "object",
        "additionalProperties": false
      },
      "uiSettings": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "features",
          "title"
        ]
      }
    },
    "additionalProperties": false,
    "required": [
      "endpoints",
      "id",
      "type",
      "ui"
    ]
  },
  "ManagementApiOptions": {
    "type": "object",
    "properties": {
      "token": {
        "type": "string"
      },
      "baseUrl": {
        "type": "string"
      },
      "jwtSecret": {
        "type": "string"
      },
      "modules": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "enum": [
                "MANAGEMENT_USER",
                "USER"
              ],
              "type": "string"
            },
            "endpoints": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "config": {
                    "type": "object",
                    "properties": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "reqSchema": {
                            "$ref": "#/definitions/Definition"
                          },
                          "resSchema": {
                            "$ref": "#/definitions/Definition"
                          }
                        },
                        "additionalProperties": false
                      },
                      "routeProps": {
                        "description": "Route props to control routing.\n\nEach handler needs to declare RouteProps which\ninstructs express web server how to route traffic.",
                        "type": "object",
                        "properties": {
                          "method": {
                            "description": "HTTP method which this handlers responds to.\n\nWill if not set attempt to extract HTTP method based\non handler file name prefix, for example `GetFoo.ts` will assume\nHTTP method `GET`.",
                            "enum": [
                              "delete",
                              "get",
                              "post",
                              "put"
                            ],
                            "type": "string"
                          },
                          "path": {
                            "description": "Route path including any path params.\nExample: `/user/:id`",
                            "type": "string"
                          },
                          "mockApi": {
                            "description": "Generates mock response based on handlers response schema.\n\nWill be ignored if handler does not have any response schema defined.\n\nThis should only be used during development ðŸ’¥",
                            "type": "boolean"
                          },
                          "permissions": {
                            "description": "Set permissions needed to access route if route requires authentication.",
                            "anyOf": [
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "docs": {
                            "description": "Optional documentation of endpoint. Can be used for example in API docs.\nSupports markdown strings.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "path"
                        ]
                      },
                      "origin": {
                        "description": "I.e. filename or plugin name that describes where handler origins from",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "routeProps"
                    ]
                  },
                  "handlerFn": {
                    "description": "Http handler function that handlers implements in order to\nhandle HTTP requests and return a JSON response.",
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false,
                "required": [
                  "config",
                  "handlerFn"
                ]
              }
            },
            "ui": {
              "type": "object",
              "additionalProperties": false
            },
            "uiSettings": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "features": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "features",
                "title"
              ]
            }
          },
          "additionalProperties": false,
          "required": [
            "endpoints",
            "id",
            "type",
            "ui"
          ]
        }
      }
    },
    "additionalProperties": false,
    "required": [
      "jwtSecret",
      "modules",
      "token"
    ]
  },
  "ModuleList": {
    "type": "object",
    "properties": {
      "modules": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "features": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "title": {
              "type": "string"
            },
            "ui": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": [
            "features",
            "id",
            "title",
            "type",
            "ui"
          ]
        }
      }
    },
    "additionalProperties": false,
    "required": [
      "modules"
    ]
  },
  "GetManagementRes": {
    "type": "object",
    "properties": {
      "modules": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "features": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "title": {
              "type": "string"
            },
            "ui": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": [
            "features",
            "id",
            "title",
            "type",
            "ui"
          ]
        }
      }
    },
    "additionalProperties": false,
    "required": [
      "modules"
    ]
  },
  "ManagementUser": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "string"
      },
      "username": {
        "type": "string"
      },
      "password": {
        "type": "string"
      },
      "salt": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "required": [
      "_id",
      "password",
      "salt",
      "username"
    ]
  },
  "ManagementUserViewModel": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "string"
      },
      "username": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "required": [
      "_id",
      "username"
    ]
  },
  "DeleteUserByUseridReq": {
    "type": "object",
    "additionalProperties": false
  },
  "DeleteUserByUseridRes": {
    "type": "object",
    "additionalProperties": false
  },
  "GetUserByUseridReq": {
    "type": "object",
    "additionalProperties": false
  },
  "GetUserByUseridRes": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "string"
      },
      "username": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "required": [
      "_id",
      "username"
    ]
  },
  "GetUserListReq": {
    "type": "object",
    "additionalProperties": false
  },
  "GetUserListRes": {
    "type": "object",
    "properties": {
      "users": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": [
            "_id",
            "username"
          ]
        }
      }
    },
    "additionalProperties": false,
    "required": [
      "users"
    ]
  },
  "GetUserMeReq": {
    "type": "object",
    "additionalProperties": false
  },
  "PostUserLoginRes": {
    "type": "object",
    "properties": {
      "user": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "_id",
          "username"
        ]
      },
      "token": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "required": [
      "token",
      "user"
    ]
  },
  "GetUserMeRes": {
    "type": "object",
    "properties": {
      "user": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "_id",
          "username"
        ]
      },
      "token": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "required": [
      "token",
      "user"
    ]
  },
  "PostUserLoginReq": {
    "type": "object",
    "properties": {
      "username": {
        "type": "string"
      },
      "password": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "required": [
      "password",
      "username"
    ]
  },
  "PostUserReq": {
    "type": "object",
    "properties": {
      "password": {
        "type": "string"
      },
      "username": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "required": [
      "password",
      "username"
    ]
  },
  "PostUserRes": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "string"
      },
      "username": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "required": [
      "_id",
      "username"
    ]
  },
  "PutUserByUseridReq": {
    "type": "object",
    "properties": {
      "password": {
        "type": "string"
      },
      "username": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "PutUserByUseridRes": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "string"
      },
      "username": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "required": [
      "_id",
      "username"
    ]
  }
}